generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  email           String           @unique
  name            String?
  userId          String           @unique
  role            Role             @default(USER)
  phoneNumber     String?
  address         Address?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  creditScore     Int?
  accounts        Account[]
  cards           Card[]
  loanApplications LoanApplication[]
  payments        Payment[]
  notifications   Notification[]
}

type Address {
  street    String
  city      String
  state     String
  zipCode   String
  country   String
}

enum Role {
  USER
  ADMIN
}

model Account {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  accountNumber String    @unique
  type          AccountType
  balance       Float     @default(0)
  currency      String    @default("INR")
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String    @db.ObjectId
  transactions  Transaction[]
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT
  INVESTMENT
}

model Card {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  cardNumber      String    @unique
  cardholderName  String
  expiryMonth     Int
  expiryYear      Int
  cvv             String    // Consider encryption for sensitive data
  type            CardType
  limit           Float?
  balance         Float     @default(0)
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String    @db.ObjectId
  transactions    Transaction[]
}

enum CardType {
  CREDIT
  DEBIT
}

model LoanApplication {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  amount          Float
  purpose         String
  term            Int             
  interestRate    Float?
  status          ApplicationStatus @default(PENDING)
  submittedAt     DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  approvedAt      DateTime?
  rejectedAt      DateTime?
  rejectionReason String?
  user            User            @relation(fields: [userId], references: [id])
  userId          String          @db.ObjectId
  loan            Loan?
  documents       Document[]
  document        String[]
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

model Loan {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  loanNumber          String        @unique
  amount              Float
  disbursedAmount     Float
  outstandingAmount   Float
  interestRate        Float
  term                Int           // In months
  startDate           DateTime
  endDate             DateTime
  status              LoanStatus    @default(ACTIVE)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  application         LoanApplication @relation(fields: [applicationId], references: [id])
  applicationId       String        @unique @db.ObjectId
  payments            Payment[]
}

enum LoanStatus {
  ACTIVE
  PAID
  DEFAULTED
  CLOSED
}

model Payment {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  amount          Float
  paymentMethod   PaymentMethod
  status          PaymentStatus @default(PENDING)
  paymentDate     DateTime      @default(now())
  dueDate         DateTime?
  reference       String?
  description     String?
  user            User          @relation(fields: [userId], references: [id])
  userId          String        @db.ObjectId
  loan            Loan?         @relation(fields: [loanId], references: [id])
  loanId          String?       @db.ObjectId
  transaction     Transaction?
}

enum PaymentMethod {
  BANK_TRANSFER
  CREDIT_CARD
  DEBIT_CARD
  CASH
  AUTOMATIC_DEBIT
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

model Transaction {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  amount          Float
  type            TransactionType
  description     String?
  status          TransactionStatus @default(PENDING)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  payment         Payment?        @relation(fields: [paymentId], references: [id])
  paymentId       String?         @unique @db.ObjectId
  account         Account?        @relation(fields: [accountId], references: [id])
  accountId       String?         @db.ObjectId
  card            Card?           @relation(fields: [cardId], references: [id])
  cardId          String?         @db.ObjectId
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  PAYMENT
  LOAN_DISBURSEMENT
  FEE
  REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

model Document {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  fileUrl         String
  fileType        String
  uploadedAt      DateTime  @default(now())
  application     LoanApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId   String    @db.ObjectId
}

model Notification {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  message         String
  type            NotificationType
  isRead          Boolean   @default(false)
  createdAt       DateTime  @default(now())
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String    @db.ObjectId
}

enum NotificationType {
  LOAN_APPLICATION_UPDATE
  PAYMENT_REMINDER
  PAYMENT_CONFIRMATION
  ACCOUNT_UPDATE
  GENERAL
}